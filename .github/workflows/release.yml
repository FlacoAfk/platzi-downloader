name: Continuous Delivery

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'

jobs:
  # Validación de commits (opcional pero recomendado)
  validate:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup | Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Setup | Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache | Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install | Dependencies
        run: poetry install --no-interaction
      
      - name: Validate | Lint with Ruff
        run: poetry run ruff check .
        continue-on-error: true
      
      - name: Validate | Type check with mypy
        run: poetry run mypy src/platzi
        continue-on-error: true

  release:
    needs: validate
    runs-on: ubuntu-latest
    concurrency: release
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Setup | Checkout Repository at workflow sha
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}
          token: ${{ secrets.PLATZI_GITHUB_TOKEN }}

      - name: Setup | Force correct release branch on workflow sha
        run: |
          git checkout -B ${{ github.ref_name }} ${{ github.sha }}

      - name: Setup | Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup | Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Action | Semantic Version Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9.9.0
        with:
          github_token: ${{ secrets.PLATZI_GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"

      - name: Build | Package
        if: steps.release.outputs.released == 'true'
        run: poetry build

      - name: Publish | Upload package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.release.outputs.released == 'true'

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v9.8.9
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.PLATZI_GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}
      
      - name: Summary | Release Information
        if: steps.release.outputs.released == 'true'
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ steps.release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Package published to PyPI" >> $GITHUB_STEP_SUMMARY
          echo "✅ GitHub Release created" >> $GITHUB_STEP_SUMMARY
      
      - name: Summary | No Release
        if: steps.release.outputs.released == 'false'
        run: |
          echo "## ℹ️ No Release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No version bump required based on commit messages." >> $GITHUB_STEP_SUMMARY
